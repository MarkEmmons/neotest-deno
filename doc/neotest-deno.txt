*neotest-deno.txt*	A framework to interact with tests within NeoVim

==============================================================================
neotest-deno                                                      *neotest-deno*
                                   `neotest-deno`
  Setup......................................................|neotest.setup()|
  Configuration Options.......................................|neotest.config|


There are three main components to this plugin's architecture.
 - Adapters: Generally language specific objects to parse tests, build commands
 and parse results

 - Client: Runs tests and stores state of tests and results, emitting events
 during operation

 - Consumers: Use the client to provide some utility to interact with tests and
 results

In order to use neotest, you must use an adapter for your language of choice.
You can supply them in the setup function.

Once you have setup an adapter, you can use neotest consumers to run and
interact with tests.
For most users, the bulk of relevant features will be in the consumers.

Each consumer can be accessed as a property of the neotest module
See the table of contents for the consumers

>
   require("neotest").summary.toggle()
<


neotest.setup()                                                *neotest.setup()*
                         `neotest.setup`({user_config})

Neotest strategies and consumers
See also~
|neotest.Config|

Parameters~
{user_config} neotest.Config

Default values:
>
  {
    adapters = {},
    benchmark = {
      enabled = true
    },
    consumers = {},
    default_strategy = "integrated",
    diagnostic = {
      enabled = true
    },
    discovery = {
      concurrent = 0,
      enabled = true
    },
    floating = {
      border = "rounded",
      max_height = 0.6,
      max_width = 0.6,
      options = {}
    },
    highlights = {
      adapter_name = "NeotestAdapterName",
      border = "NeotestBorder",
      dir = "NeotestDir",
      expand_marker = "NeotestExpandMarker",
      failed = "NeotestFailed",
      file = "NeotestFile",
      focused = "NeotestFocused",
      indent = "NeotestIndent",
      marked = "NeotestMarked",
      namespace = "NeotestNamespace",
      passed = "NeotestPassed",
      running = "NeotestRunning",
      select_win = "NeotestWinSelect",
      skipped = "NeotestSkipped",
      target = "NeotestTarget",
      test = "NeotestTest",
      unknown = "NeotestUnknown"
    },
    icons = {
      child_indent = "│",
      child_prefix = "├",
      collapsed = "─",
      expanded = "╮",
      failed = "",
      final_child_indent = " ",
      final_child_prefix = "╰",
      non_collapsible = "─",
      passed = "",
      running = "",
      running_animated = { "/", "|", "\\", "-", "/", "|", "\\", "-" },
      skipped = "",
      unknown = ""
    },
    jump = {
      enabled = true
    },
    log_level = 3,
    output = {
      enabled = true,
      open_on_run = "short"
    },
    output_panel = {
      enabled = true,
      open = "botright split | resize 15"
    },
    projects = {},
    run = {
      enabled = true
    },
    running = {
      concurrent = true
    },
    status = {
      enabled = true,
      signs = true,
      virtual_text = false
    },
    strategies = {
      integrated = {
        height = 40,
        width = 120
      }
    },
    summary = {
      animated = true,
      enabled = true,
      expand_errors = true,
      follow = true,
      mappings = {
        attach = "a",
        clear_marked = "M",
        clear_target = "T",
        debug = "d",
        debug_marked = "D",
        expand = { "<CR>", "<2-LeftMouse>" },
        expand_all = "e",
        jumpto = "i",
        mark = "m",
        next_failed = "J",
        output = "o",
        prev_failed = "K",
        run = "r",
        run_marked = "R",
        short = "O",
        stop = "u",
        target = "t"
      }
    }
  }
<

neotest.setup_project()                                *neotest.setup_project()*
           `neotest.setup_project`({project_root}, {project_config})
Configure a project individually.
Parameters~
{project_root} `(string)`
{project_config} neotest.CoreConfig


==============================================================================
neotest.config                                                  *neotest.config*

Class~
{neotest.CoreConfig}
Fields~
{adapters} neotest.Adapter[]
{discovery} neotest.Config.discovery
{running} neotest.Config.running
{default_strategy} `(string|function)`

Class~
{neotest.Config:} neotest.CoreConfig
Fields~
{log_level} `(number)` Minimum log levels, one of vim.log.levels
{consumers} `(table<string, neotest.Consumer>)`
{icons} `(table)` Icons used throughout the UI. Defaults use VSCode's codicons
{highlights} `(table<string, string>)`
{floating} neotest.Config.floating
{strategies} neotest.Config.strategies
{summary} neotest.Config.summary
{output} neotest.Config.output
{output_panel} neotest.Config.output_panel
{status} neotest.Config.status
{projects} `(table<string, neotest.CoreConfig>)` Project specific settings, keys
are project root directories (e.g "~/Dev/my_project")

Class~
{neotest.Config.discovery}
Fields~
{enabled} `(boolean)`
{concurrent} `(integer)` Number of workers to parse files concurrently. 0
automatically assigns number based on CPU. Set to 1 if experiencing lag.
{filter_dir} `(nil)` | fun(name: string, rel_path: string, root: string): boolean
A function to filter directories when searching for test files. Receives the name,
path relative to project root and project root path

Class~
{neotest.Config.running}
Fields~
{concurrent} `(boolean)` Run tests concurrently when an adapter provides multiple commands to run

Class~
{neotest.Config.floating}
Fields~
{border} `(string)` Border style
{max_height} `(number)` Max height of window as proportion of NeoVim window
{max_width} `(number)` Max width of window as proportion of NeoVim window
{options} `(table)` Window local options to set on floating windows (e.g. winblend)

Class~
{neotest.Config.strategies.integrated}
Fields~
{width} `(integer)` Width to pass to the pty runnning commands

Class~
{neotest.Config.strategies}
Fields~
{integrated} neotest.Config.strategies.integrated

Class~
{neotest.Config.summary}
Fields~
{enabled} `(boolean)`
{animated} `(boolean)` Enable/disable animation of icons
{follow} `(boolean)` Expand user's current file
{expand_errors} `(boolean)` Expand all failed positions
{mappings} neotest.Config.summary.mappings Buffer mappings for summary window

Class~
{neotest.Config.summary.mappings}
Fields~
{expand} `(string|string[])` Expand currently selected position
{expand_all} `(string|string[])` Expand all positions under currently selected
{output} `(string|string[])` Show output for position
{short} `(string|string[])` Show short output for position (if exists)
{attach} `(string|string[])` Attach to process for position
{jumpto} `(string|string[])` Jump to the selected position
{stop} `(string|string[])` Stop selected position
{run} `(string|string[])` Run selected position
{debug} `(string|string[])` Debug selected position
{mark} `(string|string[])` Mark the selected position
{run_marked} `(string|string[])` Run the marked positions for selected suite.
{debug_marked} `(string|string[])` Debug the marked positions for selected suite.
{clear_marked} `(string|string[])` Clear the marked positions for selected suite.
{target} `(string|string[])` Target a position to be the only shown position for its adapter
{clear_target} `(string|string[])` Clear the target position for the selected adapter
{next_failed} `(string|string[])` Jump to the next failed position
{prev_failed} `(string|string[])` Jump to the previous failed position

Class~
{neotest.Config.output}
Fields~
{enabled} `(boolean)`
{open_on_run} `(string|boolean)` Open nearest test result after running

Class~
{neotest.Config.output_panel}
Fields~
{enabled} `(boolean)`
{open} `(string)` | fun(): integer A command or function to open a window for the output panel

Class~
{neotest.Config.diagnostic}
Fields~
{enabled} `(boolean)`

Class~
{neotest.Config.status}
Fields~
{enabled} `(boolean)`
{virtual_text} `(boolean)` Display status using virtual text
{signs} `(boolean)` Display status using signs


 vim:tw=78:ts=8:noet:ft=help:norl:
